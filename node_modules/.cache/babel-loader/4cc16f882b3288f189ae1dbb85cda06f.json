{"ast":null,"code":"var _dec,\n    _class,\n    _class2,\n    _temp,\n    _jsxFileName = \"/home/javier/work/urbe/Feldspar-master/src/Components/AuthRoute/AuthRoute.jsx\";\n\nimport Login from '../Login.jsx';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport TopBar from \"../TopBar/TopBar.jsx\";\nimport Loading from '../Loading/Loading.jsx';\nimport { Route, Redirect, useLocation } from \"react-router-dom\";\nimport { observer, inject } from \"mobx-react\";\nlet AuthRoute = (_dec = inject(\"store\"), _dec(_class = observer(_class = (_temp = _class2 = class AuthRoute extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      nodeShouldBeRender: /*#__PURE__*/React.createElement(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 25\n        }\n      }),\n      isTopBarRender: false\n    };\n\n    this.handleAuth = () => {\n      const {\n        location\n      } = useLocation();\n      setTimeout(() => {\n        if (this.state.isLoggedIn) {\n          this.setState({\n            isTopBarRender: true,\n            nodeShouldBeRender: this.props.component\n          });\n        } else {\n          this.setState({\n            isTopBarRender: false,\n            nodeShouldBeRender: /*#__PURE__*/React.createElement(Redirect, {\n              to: {\n                pathname: \"/login\",\n                state: {\n                  from: location\n                }\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 31\n              }\n            })\n          });\n        }\n      }, 1000);\n    };\n  }\n\n  componentDidMount() {\n    this.handleAuth();\n  }\n\n  render() {\n    const {\n      isTopBarRender,\n      nodeShouldBeRender\n    } = this.state;\n    const {\n      path\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, isTopBarRender ? /*#__PURE__*/React.createElement(TopBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 28\n      }\n    }) : undefined, /*#__PURE__*/React.createElement(Route, {\n      path: path,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, nodeShouldBeRender));\n  }\n\n}, _class2.propTypes = {\n  isAuth: PropTypes.bool.isRequired,\n  path: PropTypes.string.isRequired,\n  component: PropTypes.node.isRequired\n}, _temp)) || _class) || _class);\nexport default AuthRoute;","map":{"version":3,"sources":["/home/javier/work/urbe/Feldspar-master/src/Components/AuthRoute/AuthRoute.jsx"],"names":["Login","PropTypes","React","Component","TopBar","Loading","Route","Redirect","useLocation","observer","inject","AuthRoute","state","nodeShouldBeRender","isTopBarRender","handleAuth","location","setTimeout","isLoggedIn","setState","props","component","pathname","from","componentDidMount","render","path","width","height","undefined","propTypes","isAuth","bool","isRequired","string","node"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,cAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,YAAjC;IAIMC,S,WAFLD,MAAM,CAAC,OAAD,C,gBACND,Q,6BADD,MAEME,SAFN,SAEwBR,SAFxB,CAEkC;AAAA;AAAA;AAAA,SAOhCS,KAPgC,GAOxB;AACNC,MAAAA,kBAAkB,eAAE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADd;AAENC,MAAAA,cAAc,EAAE;AAFV,KAPwB;;AAAA,SAYhCC,UAZgC,GAYnB,MAAM;AACjB,YAAM;AAAEC,QAAAA;AAAF,UAAeR,WAAW,EAAhC;AACAS,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI,KAAKL,KAAL,CAAWM,UAAf,EAA2B;AACzB,eAAKC,QAAL,CAAc;AACZL,YAAAA,cAAc,EAAE,IADJ;AAEZD,YAAAA,kBAAkB,EAAE,KAAKO,KAAL,CAAWC;AAFnB,WAAd;AAID,SALD,MAKO;AACL,eAAKF,QAAL,CAAc;AACZL,YAAAA,cAAc,EAAE,KADJ;AAEZD,YAAAA,kBAAkB,eAAE,oBAAC,QAAD;AAAU,cAAA,EAAE,EAAE;AAAES,gBAAAA,QAAQ,EAAE,QAAZ;AAAuBV,gBAAAA,KAAK,EAAE;AAAEW,kBAAAA,IAAI,EAAEP;AAAR;AAA9B,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR,WAAd;AAID;AACF,OAZS,EAYP,IAZO,CAAV;AAaD,KA3B+B;AAAA;;AA6BhCQ,EAAAA,iBAAiB,GAAG;AAClB,SAAKT,UAAL;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEX,MAAAA,cAAF;AAAkBD,MAAAA;AAAlB,QAAyC,KAAKD,KAApD;AACA,UAAM;AAAEc,MAAAA;AAAF,QAAW,KAAKN,KAAtB;AAEA,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEId,cAAc,gBAAG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAgBe,SAFlC,eAIE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAEH,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIb,kBADJ,CAJF,CADF;AAUD;;AA/C+B,C,UACzBiB,S,GAAY;AACjBC,EAAAA,MAAM,EAAE9B,SAAS,CAAC+B,IAAV,CAAeC,UADN;AAEjBP,EAAAA,IAAI,EAAEzB,SAAS,CAACiC,MAAV,CAAiBD,UAFN;AAGjBZ,EAAAA,SAAS,EAAEpB,SAAS,CAACkC,IAAV,CAAeF;AAHT,C;AAiDrB,eAAetB,SAAf","sourcesContent":["import Login from '../Login.jsx';\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport TopBar from \"../TopBar/TopBar.jsx\";\nimport Loading from '../Loading/Loading.jsx';\nimport { Route, Redirect, useLocation } from \"react-router-dom\";\nimport { observer, inject } from \"mobx-react\";\n\n@inject(\"store\")\n@observer\nclass AuthRoute extends Component {\n  static propTypes = {\n    isAuth: PropTypes.bool.isRequired,\n    path: PropTypes.string.isRequired,\n    component: PropTypes.node.isRequired,\n  }\n\n  state = {\n    nodeShouldBeRender: <Loading />,\n    isTopBarRender: false\n  }\n\n  handleAuth = () => {\n    const { location } = useLocation();\n    setTimeout(() => {\n      if (this.state.isLoggedIn) {\n        this.setState({\n          isTopBarRender: true,\n          nodeShouldBeRender: this.props.component\n        })\n      } else {\n        this.setState({\n          isTopBarRender: false,\n          nodeShouldBeRender: <Redirect to={{ pathname: \"/login\",  state: { from: location } }} />\n        })\n      }\n    }, 1000)\n  }\n\n  componentDidMount() {\n    this.handleAuth();\n  }\n\n  render() {\n    const { isTopBarRender, nodeShouldBeRender } = this.state;\n    const { path } = this.props;\n\n    return (\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        {\n          isTopBarRender ? <TopBar /> : undefined\n        }\n        <Route path={path}>\n          { nodeShouldBeRender }\n        </Route>\n      </div>\n    )\n  }\n}\n\nexport default AuthRoute;\n"]},"metadata":{},"sourceType":"module"}