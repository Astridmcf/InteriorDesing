{"ast":null,"code":"var _dec,\n    _class,\n    _jsxFileName = \"/home/javier/work/urbe/Feldspar-master/src/Components/TextureList/FloorTextureList.jsx\";\n\nimport React, { Component } from \"react\";\nimport TextureList from \"./TextureList.jsx\";\nimport { BASE_URL, TEXTURES, FLOOR_WOOD_CATEGORY, FLOOR_MARBLE_CATEGORY, FLOOR_TILE_CATEGORY, RESOURCES, GET_FREE_RESOURCES, GET_RESOURCES, FIND } from \"../../Constants.js\";\nimport axios from \"axios\";\nimport { inject, observer } from \"mobx-react\";\nlet FloorTextureList = (_dec = inject(\"store\"), _dec(_class = observer(_class = class FloorTextureList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoggedIn: false,\n      textureListWood: [],\n      textureListMarble: [],\n      textureListTile: []\n    };\n    this.getUserList = this.getUserList.bind(this);\n    this.getFreeList = this.getFreeList.bind(this);\n    this.clearList = this.clearList.bind(this);\n  }\n\n  clearList() {\n    if (this.state.isLoggedIn === false) {\n      this.setState({\n        textureListWood: [],\n        textureListMarble: [],\n        textureListTile: []\n      });\n    }\n  }\n\n  getUserList() {\n    if (this.state.isLoggedIn) {\n      let textureCategoryFloorWood = {\n        category: FLOOR_WOOD_CATEGORY\n      };\n      let textureCategoryFloorMarble = {\n        category: FLOOR_MARBLE_CATEGORY\n      };\n      let textureCategoryFloorTile = {\n        category: FLOOR_TILE_CATEGORY\n      };\n      let token = this.props.store.obtenerTokenDeAcceso;\n      let config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      axios.post(BASE_URL + RESOURCES + GET_RESOURCES, textureCategoryFloorWood, config).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListWood];\n          temp.push(res.data);\n          this.setState({\n            textureListWood: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_RESOURCES, textureCategoryFloorMarble, config).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListMarble];\n          temp.push(res.data);\n          this.setState({\n            textureListMarble: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_RESOURCES, textureCategoryFloorTile, config).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListTile];\n          temp.push(res.data);\n          this.setState({\n            textureListTile: temp\n          });\n          return res.data;\n        }));\n      });\n    }\n  }\n\n  getFreeList() {\n    if (!this.state.isLoggedIn) {\n      let textureCategoryFloorWood = {\n        category: FLOOR_WOOD_CATEGORY\n      };\n      let textureCategoryFloorMarble = {\n        category: FLOOR_MARBLE_CATEGORY\n      };\n      let textureCategoryFloorTile = {\n        category: FLOOR_TILE_CATEGORY\n      };\n      axios.post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategoryFloorWood).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListWood];\n          temp.push(res.data);\n          this.setState({\n            textureListWood: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategoryFloorMarble).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListMarble];\n          temp.push(res.data);\n          this.setState({\n            textureListMarble: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategoryFloorTile).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListTile];\n          temp.push(res.data);\n          this.setState({\n            textureListTile: temp\n          });\n          return res.data;\n        }));\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.getFreeList();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapShot) {\n    if (this.props.store.obtenerInicioDeSesion && prevState.isLoggedIn === false) {\n      this.setState({\n        isLoggedIn: true\n      });\n      this.clearList();\n      this.getUserList();\n    }\n\n    if (this.props.store.obtenerInicioDeSesion === false && prevState.isLoggedIn) {\n      this.setState({\n        isLoggedIn: false\n      });\n      this.clearList();\n      this.getFreeList();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }, \"Ajustar piso\"), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"small-underline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }\n    }, \"Madera\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureListWood.reverse(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }, \"M\\xE1rmol\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureListMarble.reverse(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, \"Baldosas\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureListTile.reverse(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}) || _class) || _class);\nexport default FloorTextureList;","map":{"version":3,"sources":["/home/javier/work/urbe/Feldspar-master/src/Components/TextureList/FloorTextureList.jsx"],"names":["React","Component","TextureList","BASE_URL","TEXTURES","FLOOR_WOOD_CATEGORY","FLOOR_MARBLE_CATEGORY","FLOOR_TILE_CATEGORY","RESOURCES","GET_FREE_RESOURCES","GET_RESOURCES","FIND","axios","inject","observer","FloorTextureList","constructor","props","state","isLoggedIn","textureListWood","textureListMarble","textureListTile","getUserList","bind","getFreeList","clearList","setState","textureCategoryFloorWood","category","textureCategoryFloorMarble","textureCategoryFloorTile","token","store","obtenerTokenDeAcceso","config","headers","Authorization","post","then","res","textureListTemp","data","Promise","all","map","textureId","get","temp","push","componentDidMount","componentDidUpdate","prevProps","prevState","snapShot","obtenerInicioDeSesion","render","reverse"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TextureList from \"./TextureList.jsx\";\nimport {\n  BASE_URL,\n  TEXTURES,\n  FLOOR_WOOD_CATEGORY,\n  FLOOR_MARBLE_CATEGORY,\n  FLOOR_TILE_CATEGORY,\n  RESOURCES,\n  GET_FREE_RESOURCES,\n  GET_RESOURCES,\n  FIND,\n} from \"../../Constants.js\";\nimport axios from \"axios\";\nimport { inject, observer } from \"mobx-react\";\n\n@inject(\"store\")\n@observer\nclass FloorTextureList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoggedIn: false,\n      textureListWood: [],\n      textureListMarble: [],\n      textureListTile: [],\n    };\n\n    this.getUserList = this.getUserList.bind(this);\n    this.getFreeList = this.getFreeList.bind(this);\n    this.clearList = this.clearList.bind(this);\n  }\n\n  clearList() {\n    if (this.state.isLoggedIn === false) {\n      this.setState({\n        textureListWood: [],\n        textureListMarble: [],\n        textureListTile: [],\n      });\n    }\n  }\n\n  getUserList() {\n    if (this.state.isLoggedIn) {\n      let textureCategoryFloorWood = { category: FLOOR_WOOD_CATEGORY };\n      let textureCategoryFloorMarble = { category: FLOOR_MARBLE_CATEGORY };\n      let textureCategoryFloorTile = { category: FLOOR_TILE_CATEGORY };\n\n      let token = this.props.store.obtenerTokenDeAcceso;\n      let config = {\n        headers: { Authorization: `Bearer ${token}` },\n      };\n\n      axios\n        .post(\n          BASE_URL + RESOURCES + GET_RESOURCES,\n          textureCategoryFloorWood,\n          config\n        )\n        .then((res) => {\n          let textureListTemp = res.data;\n          Promise.all(\n            textureListTemp.map(async (textureId) => {\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n              let temp = [...this.state.textureListWood];\n              temp.push(res.data);\n              this.setState({ textureListWood: temp });\n              return res.data;\n            })\n          );\n        });\n\n      axios\n        .post(\n          BASE_URL + RESOURCES + GET_RESOURCES,\n          textureCategoryFloorMarble,\n          config\n        )\n        .then((res) => {\n          let textureListTemp = res.data;\n          Promise.all(\n            textureListTemp.map(async (textureId) => {\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n              let temp = [...this.state.textureListMarble];\n              temp.push(res.data);\n              this.setState({ textureListMarble: temp });\n              return res.data;\n            })\n          );\n        });\n\n      axios\n        .post(\n          BASE_URL + RESOURCES + GET_RESOURCES,\n          textureCategoryFloorTile,\n          config\n        )\n        .then((res) => {\n          let textureListTemp = res.data;\n          Promise.all(\n            textureListTemp.map(async (textureId) => {\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n              let temp = [...this.state.textureListTile];\n              temp.push(res.data);\n              this.setState({ textureListTile: temp });\n              return res.data;\n            })\n          );\n        });\n    }\n  }\n\n  getFreeList() {\n    if (!this.state.isLoggedIn) {\n      let textureCategoryFloorWood = { category: FLOOR_WOOD_CATEGORY };\n      let textureCategoryFloorMarble = { category: FLOOR_MARBLE_CATEGORY };\n      let textureCategoryFloorTile = { category: FLOOR_TILE_CATEGORY };\n\n      axios\n        .post(\n          BASE_URL + RESOURCES + GET_FREE_RESOURCES,\n          textureCategoryFloorWood\n        )\n        .then((res) => {\n          let textureListTemp = res.data;\n          Promise.all(\n            textureListTemp.map(async (textureId) => {\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n              let temp = [...this.state.textureListWood];\n              temp.push(res.data);\n              this.setState({ textureListWood: temp });\n              return res.data;\n            })\n          );\n        });\n\n      axios\n        .post(\n          BASE_URL + RESOURCES + GET_FREE_RESOURCES,\n          textureCategoryFloorMarble\n        )\n        .then((res) => {\n          let textureListTemp = res.data;\n          Promise.all(\n            textureListTemp.map(async (textureId) => {\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n              let temp = [...this.state.textureListMarble];\n              temp.push(res.data);\n              this.setState({ textureListMarble: temp });\n              return res.data;\n            })\n          );\n        });\n\n      axios\n        .post(\n          BASE_URL + RESOURCES + GET_FREE_RESOURCES,\n          textureCategoryFloorTile\n        )\n        .then((res) => {\n          let textureListTemp = res.data;\n          Promise.all(\n            textureListTemp.map(async (textureId) => {\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n              let temp = [...this.state.textureListTile];\n              temp.push(res.data);\n              this.setState({ textureListTile: temp });\n              return res.data;\n            })\n          );\n        });\n    }\n  }\n\n  componentDidMount() {\n    this.getFreeList();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapShot) {\n    if (this.props.store.obtenerInicioDeSesion && prevState.isLoggedIn === false) {\n      this.setState({ isLoggedIn: true });\n      this.clearList();\n      this.getUserList();\n    }\n    if (this.props.store.obtenerInicioDeSesion === false && prevState.isLoggedIn) {\n      this.setState({ isLoggedIn: false });\n      this.clearList();\n      this.getFreeList();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"texture-panel\">\n        <div className=\"panel-heading\">Ajustar piso</div>\n        <hr className=\"small-underline\" />\n        <div className=\"texture-panel-heading\">Madera</div>\n        <TextureList textureList={this.state.textureListWood.reverse()} />\n        <div className=\"texture-panel-heading\">Mármol</div>\n        <TextureList textureList={this.state.textureListMarble.reverse()} />\n        <div className=\"texture-panel-heading\">Baldosas</div>\n        <TextureList textureList={this.state.textureListTile.reverse()} />\n      </div>\n    );\n  }\n}\n\nexport default FloorTextureList;\n"]},"metadata":{},"sourceType":"module"}